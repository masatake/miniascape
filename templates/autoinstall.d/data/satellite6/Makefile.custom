# Makefile to define custom variables, rules and targets.
# Author: Satoru SATOH <ssato/redhat.com>
# License: MIT
#
{% if satellite -%}
{%     if satellite.admin -%}
ADMIN_NAME = {{ satellite.admin.name|default("admin") }}
KATELLO_INSTALLER_OPTIONS ?= \
--foreman-admin-username=$(ADMIN_NAME) \
{{ "--foreman-admin-email=%s" % satellite.admin.email if satellite.admin.email }} \
{{ "--foreman-admin-first-name=%s" % satellite.admin.first_name if satellite.admin.first_name }} \
{{ "--foreman-admin-last-name=%s" % satellite.admin.last_name if satellite.admin.last_name }} \
{{ satellite.installer_extra_options|default('') }}
{%     endif -%}
ORG_NAME ?= {{ satellite.organization|default("Default Organization") }}
LOCATION_NAME ?= {{ satellite.location|default("Default Location") }}

define create-lifecycle-environments =
hammer --output=yaml lifecycle-environment list --organization-id `cat $<` | \
sed -nr 's/.*Name: (.+)$$/,\1,/p' > ~/.hammer/lifecycle_envs_00.txt
{%     for env in satellite.lifecycle_environments if env.name -%}
grep ',{{ env.name }},' ~/.hammer/lifecycle_envs_00.txt || \
hammer lifecycle-environment create --organization-id `cat $<` \
--name '{{ env.name }}' --label {{ env.label if env.label else env.name|replace(' ', '_') }} \
--prior '{{ env.prior|default('Library') }}' \
{{ '--description="%s"' % env.description if env.description }}
{%    endfor %}
endef

define enable-repos-for-clients =
{%     for repo in satellite.repos if repo.name -%}
hammer repository-set enable --organization-id `cat $<` \
--basearch {{ repo.arch|default('x86_64') }} \
--product '{{ repo.product|default("Red Hat Enterprise Linux Server") }}' \
--name '{{ repo.name }}' {{ '--releasever %s' % repo.releasever if repo.releasever }} || :
{%     else -%}
@echo "Repos to enable are not defined"
{%-    endfor %}
endef

define create-and-setup-sync-plans-for-products =
hammer sync-plan info --organization-id `cat $<` --name 'Daily Sync' || \
hammer sync-plan create --organization-id `cat $<` --interval daily --name 'Daily Sync' --enabled true
{%     for prod in satellite.products if prod.name and (prod.sync or prod.sync is not defined) -%}
hammer product set-sync-plan --organization-id `cat $<` --name '{{ prod.name }}' --sync-plan-id 1
{%     else -%}
@echo "Do not set sync plan for products"
{%-    endfor %}
endef

define create-host-collections =
hammer --output=yaml host-collection list --organization-id `cat $<` | \
sed -nr 's/.*Name: (.+)$$/,\1,/p' > ~/.hammer/host_collections_00.txt
{%     for hc in satellite.host_collections if hc.name -%}
grep ',{{ hc.name }},' ~/.hammer/host_collections_00.txt || \
hammer host-collection create --organization-id `cat $<` \
--name '{{ hc.name }}' \
{{ '--description "%s"' % hc.description if hc.description }} \
{{ '--max-content-hosts %s' % hc.max if hc.max }} \
{{ '--systems %s' % hc.hosts|join(',') if hc.hosts }}
{%   endfor %}
endef

define sync-repos-by-products =
{%     for prod in satellite.products if (prod.sync or prod.sync is not defined) and prod.name -%}
hammer product synchronize --organization-id `cat $<` --async --name '{{ prod.name }}'
{%     else -%}
@echo "Products to sync are not defined"
{%-    endfor %}
endef

define sync-repos-by-repos =
{%     for repo in satellite.repos if (repo.sync or repo.sync is not defined) and repo.name -%}
hammer repository synchronize --organization-id `cat $<` --async \
--basearch {{ repo.arch|default('x86_64') }} \
--product '{{ repo.product|default("Red Hat Enterprise Linux Server") }}' \
--name '{{ repo.name }}' {{ '--releasever %s' % repo.releasever if repo.releasever }}
{%     else -%}
@echo "Yum repos to sync are not defined"
{%-    endfor %}
endef

# --repositories option does not work.
# see also: https://bugzilla.redhat.com/show_bug.cgi?id=1254977
define create-content-views =
hammer --output=yaml content-view list --organization-id `cat $<` | \
sed -nr 's/.*Name: (.+)$$/,\1,/p' > ~/.hammer/content_views_00.txt
{%     for cv in satellite.content_views if cv.name -%}
grep ',{{ cv.name }},' ~/.hammer/content_views_00.txt || \
hammer content-view create --organization-id `cat $<` \
--name '{{ cv.name }}' --label {{ cv.label if cv.label else cv.name|replace(' ', '_') }} \
{{ '--description "%s"' % cv.description if cv.description }} \
{%          for repo in cv.repos if repo.name and repo.product -%}
&& hammer content-view add-repository --organization-id `cat $<` \
--name '{{ cv.name }}' --repository '{{ repo.name }}' --product '{{ repo.product }}'
{%          endfor -%}
{%    endfor %}
endef

define create-activation-keys =
hammer --output=yaml activation-key list --organization-id `cat $<` | \
sed -nr 's/.*Name: (.+)$$/,\1,/p' > ~/.hammer/activation_keys_00.txt
{%     for key in satellite.activation_keys if key.name -%}
grep ',{{ key.name }},' ~/.hammer/activation_keys_00.txt || \
hammer activation-key create --organization-id `cat $<` \
--name '{{ key.name }}' {{ '--description "%s"' % key.description if key.description }} \
--content-view '{{ key.cv or "Default Organization View" }}' \
--lifecycle-environment '{{ key.env or "Library" }}' {{ '--max-content-hosts %s' % key.max if key.max  }} && \
{%         if key.hc -%}
hammer activation-key add-host-collection --organization-id `cat $<` \
--name '{{ key.name }}' --host-collection '{{ key.hc }}'
{%-        endif %}{# TODO: hammer add-subscription ... #}
{%    endfor %}
endef

{% else -%}
ADMIN_NAME ?= admin
KATELLO_INSTALLER_OPTIONS ?= --foreman-admin-username=$(ADMIN_NAME)
{% endif -%} {# if satellite #}

{% if proxy and proxy.fqdn -%}
KATELLO_INSTALLER_OPTIONS += \
{{ "--katello-proxy-url='http://%s'" % proxy.fqdn }} \
--katello-proxy-port={{ proxy.port|default('8080') }} \
{{ "--katello-proxy-username=%s" % proxy.username if proxy.username }} \
{{ "--katello-proxy-password=%s" % proxy.password if proxy.password }}
PROXY_URL ?= {{ "http://%s:%s" % (proxy.fqdn, proxy.port|default('8080')) }}
CURL_PROXY_OPT ?= --proxy $(PROXY_URL)
TWEAK_SELINUX_POLICY ?= semanage port -at foreman_proxy_port_t -p tcp {{ proxy.port|default('8080') }}
{%- else -%}
PROXY_URL ?=
CURL_PROXY_OPT ?=
TWEAK_SELINUX_POLICY ?= :
{%- endif %}

# vim:noet:ft=make:
{# #}
